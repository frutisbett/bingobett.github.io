–æ// üé∞ –°–ï–†–í–ï–† –î–ò–õ–ï–†–ê –î–õ–Ø BINGOBETT
// –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ GitHub Pages —á–µ—Ä–µ–∑ GitHub Actions

const express = require('express');
const crypto = require('crypto');
const axios = require('axios');

class DealerServer {
    constructor() {
        this.app = express();
        this.port = process.env.PORT || 3000;
        this.secretKey = process.env.SECRET_KEY || 'bingobett_dealer_secret_2025';
        this.payments = new Map();
        
        this.setupMiddleware();
        this.setupRoutes();
    }
    
    setupMiddleware() {
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: true }));
        
        // CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        this.app.use((req, res, next) => {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
            res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
            next();
        });
    }
    
    setupRoutes() {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∏–ª–µ—Ä–∞
        this.app.get('/', (req, res) => {
            res.json({
                status: 'online',
                service: 'BingoBett Dealer Server',
                version: '1.0.0',
                timestamp: new Date().toISOString()
            });
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        this.app.post('/api/payment/create', (req, res) => {
            try {
                const { amount, user_id, game, payment_id, return_url } = req.body;
                
                if (!amount || !user_id || !payment_id) {
                    return res.status(400).json({
                        error: 'Missing required parameters: amount, user_id, payment_id'
                    });
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const transaction_id = `dealer_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;
                
                // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooMoney
                const yoomoneyUrl = this.generateYooMoneyUrl(amount, transaction_id, return_url);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                const paymentData = {
                    id: payment_id,
                    transaction_id,
                    amount: parseInt(amount),
                    user_id,
                    game: game || 'bingo',
                    status: 'pending',
                    created_at: new Date().toISOString(),
                    yoomoney_url: yoomoneyUrl
                };
                
                this.payments.set(payment_id, paymentData);
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (24 —á–∞—Å–∞)
                this.cleanOldPayments();
                
                res.json({
                    success: true,
                    payment_id,
                    transaction_id,
                    redirect_url: yoomoneyUrl,
                    dealer_url: `https://frutisbett.github.io/bingobett.github.io/dealer-payment.html?transaction=${transaction_id}`
                });
                
            } catch (error) {
                console.error('Payment creation error:', error);
                res.status(500).json({ error: 'Internal server error' });
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        this.app.get('/api/payment/status/:payment_id', (req, res) => {
            const { payment_id } = req.params;
            const payment = this.payments.get(payment_id);
            
            if (!payment) {
                return res.status(404).json({ error: 'Payment not found' });
            }
            
            res.json({
                payment_id: payment.id,
                status: payment.status,
                amount: payment.amount,
                user_id: payment.user_id,
                created_at: payment.created_at,
                updated_at: payment.updated_at
            });
        });
        
        // Webhook –æ—Ç YooMoney (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
        this.app.post('/api/webhook/yoomoney', (req, res) => {
            try {
                const { notification_type, operation_id, amount, currency, datetime, sender, codepro, label, sha1_hash } = req.body;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                if (!this.verifyYooMoneySignature(req.body)) {
                    console.warn('Invalid YooMoney signature');
                    return res.status(403).json({ error: 'Invalid signature' });
                }
                
                if (notification_type === 'card-incoming') {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º transaction_id –∏–∑ –º–µ—Ç–∫–∏
                    const transaction_id = label;
                    const payment = this.findPaymentByTransactionId(transaction_id);
                    
                    if (payment && payment.status === 'pending') {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                        payment.status = 'completed';
                        payment.updated_at = new Date().toISOString();
                        payment.yoomoney_operation_id = operation_id;
                        
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–≥—Ä—É
                        this.notifyGameSuccess(payment);
                        
                        console.log(`Payment ${payment.id} completed successfully`);
                    }
                }
                
                res.status(200).send('OK');
                
            } catch (error) {
                console.error('Webhook error:', error);
                res.status(500).json({ error: 'Webhook processing failed' });
            }
        });
        
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        this.app.get('/success', (req, res) => {
            const { payment_id, amount } = req.query;
            res.send(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - BingoBett</title>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f5f5f5; }
                        .success { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                        h1 { color: #4caf50; }
                    </style>
                </head>
                <body>
                    <div class="success">
                        <h1>‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</h1>
                        <p>–°—É–º–º–∞: <strong>${amount} ‚ÇΩ</strong></p>
                        <p>ID –ø–ª–∞—Ç–µ–∂–∞: <code>${payment_id}</code></p>
                        <p>–í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
                        <p><a href="https://frutisbett.github.io/bingobett.github.io/">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É</a></p>
                    </div>
                </body>
                </html>
            `);
        });
        
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        this.app.get('/error', (req, res) => {
            res.send(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ - BingoBett</title>
                    <meta charset="UTF-8">
                    <style>body { font-family: Arial; text-align: center; padding: 50px; }</style>
                </head>
                <body>
                    <h1 style="color: #f44336;">‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</h1>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</p>
                    <p><a href="https://frutisbett.github.io/bingobett.github.io/">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É</a></p>
                </body>
                </html>
            `);
        });
    }
    
    generateYooMoneyUrl(amount, transaction_id, return_url) {
        // –ë–∞–∑–æ–≤—ã–π URL YooMoney —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const baseUrl = 'https://yoomoney.ru/quickpay/confirm.xml';
        const params = new URLSearchParams({
            receiver: '4100118182998706', // –í–∞—à –∫–æ—à–µ–ª–µ–∫ YooMoney
            'quickpay-form': 'shop',
            targets: `BingoBett –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (${transaction_id})`,
            'paymentType': 'AC',
            sum: amount,
            label: transaction_id,
            successURL: return_url || `https://frutisbett.github.io/bingobett.github.io/?payment=success&amount=${amount}`,
            failURL: `https://frutisbett.github.io/bingobett.github.io/error`
        });
        
        return `${baseUrl}?${params.toString()}`;
    }
    
    verifyYooMoneySignature(data) {
        // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç YooMoney
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö YooMoney
        const { notification_type, operation_id, amount, currency, datetime, sender, codepro, label, sha1_hash } = data;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        return true;
    }
    
    findPaymentByTransactionId(transaction_id) {
        for (let [payment_id, payment] of this.payments) {
            if (payment.transaction_id === transaction_id) {
                return payment;
            }
        }
        return null;
    }
    
    notifyGameSuccess(payment) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–≥—Ä—É –æ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSocket –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å
        const message = `üéâ –ò–≥—Ä–æ–∫ ${payment.user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª –Ω–∞ ${payment.amount}‚ÇΩ!`;
        const chatId = payment.user_id; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ user_id - —ç—Ç–æ chat_id –≤ Telegram

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        axios.post(`https://api.telegram.org/bot7686465885:AAHYpW0wfTKtjUTGTS6IOIq1eY8XhFm8L2g/sendMessage`, {
            chat_id: chatId,
            text: message,
            parse_mode: 'Markdown'
        })
        .then(response => {
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', response.data);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
        });
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Telegram –±–æ—Ç–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }
    
    cleanOldPayments() {
        const now = new Date();
        const twentyFourHours = 24 * 60 * 60 * 1000;
        
        for (let [payment_id, payment] of this.payments) {
            const created = new Date(payment.created_at);
            if (now - created > twentyFourHours) {
                this.payments.delete(payment_id);
            }
        }
    }
    
    start() {
        this.app.listen(this.port, () => {
            console.log(`üé∞ BingoBett Dealer Server running on port ${this.port}`);
            console.log(`üìä API endpoints:`);
            console.log(`   POST /api/payment/create - –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞`);
            console.log(`   GET /api/payment/status/:id - –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞`);
            console.log(`   POST /api/webhook/yoomoney - Webhook –æ—Ç YooMoney`);
        });
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
    const server = new DealerServer();
    server.start();
}

module.exports = DealerServer;
