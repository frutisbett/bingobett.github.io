#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–∏–Ω–∏-–∏–≥—Ä—ã "–î–æ–∂–¥—å –º–æ–Ω–µ—Ç" –¥–ª—è BingoBett
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
 */

const fs = require('fs');
const path = require('path');

class CoinRainGameTester {
    constructor() {
        this.testResults = {
            startTime: new Date(),
            testsRun: 0,
            testsPassed: 0,
            testsFailed: 0,
            details: [],
            gameParameters: {},
            codeAnalysis: {}
        };
        
        console.log('üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–∏–Ω–∏-–∏–≥—Ä—ã "–î–æ–∂–¥—å –º–æ–Ω–µ—Ç"');
        console.log('=' .repeat(60));
    }

    async runAllTests() {
        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');

            // 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
            await this.analyzeGameCode();
            
            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML
            await this.testHtmlStructure();
            
            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Å—Ç–∏–ª–µ–π
            await this.testCssStyles();
            
            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript –ª–æ–≥–∏–∫–∏
            await this.testJavaScriptLogic();
            
            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã
            await this.testGameParameters();
            
            // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            await this.testIntegration();
            
            // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            this.generateFinalReport();

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            process.exit(1);
        }
    }

    async analyzeGameCode() {
        this.log('üìÑ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏–≥—Ä—ã...', 'info');
        
        try {
            const indexPath = path.join(__dirname, 'index.html');
            if (!fs.existsSync(indexPath)) {
                throw new Error('–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const htmlContent = fs.readFileSync(indexPath, 'utf8');
            this.testResults.codeAnalysis.fileSize = Math.round(htmlContent.length / 1024);
            
            // –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const checks = [
                { name: 'HTML —ç–ª–µ–º–µ–Ω—Ç coinRainOverlay', pattern: /id="coinRainOverlay"/g },
                { name: 'Canvas —ç–ª–µ–º–µ–Ω—Ç', pattern: /id="coinRainCanvas"/g },
                { name: 'UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∂–¥—è –º–æ–Ω–µ—Ç', pattern: /id="coinRainUI"/g },
                { name: '–§—É–Ω–∫—Ü–∏—è startCoinRainGame', pattern: /function startCoinRainGame/g },
                { name: '–ö–ª–∞—Å—Å Coin', pattern: /class Coin \{/g },
                { name: 'CSS —Å—Ç–∏–ª–∏ –º–∏–Ω–∏-–∏–≥—Ä—ã', pattern: /#coinRainOverlay/g },
                { name: '–ü–∞—Ä–∞–º–µ—Ç—Ä GAME_DURATION', pattern: /GAME_DURATION.*4000/g },
                { name: '–ü–∞—Ä–∞–º–µ—Ç—Ä COIN_VALUE', pattern: /COIN_VALUE.*5/g },
                { name: '–ü–∞—Ä–∞–º–µ—Ç—Ä MAX_TOTAL_VALUE', pattern: /MAX_TOTAL_VALUE.*800/g }
            ];

            for (const check of checks) {
                const matches = htmlContent.match(check.pattern);
                const found = matches && matches.length > 0;
                
                this.testResults.codeAnalysis[check.name] = found;
                this.runTest(check.name, found, found ? '–ù–∞–π–¥–µ–Ω–æ' : '–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
            }

            this.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');

        } catch (error) {
            this.runTest('–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞', false, error.message);
        }
    }

    async testHtmlStructure() {
        this.log('üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...', 'info');
        
        try {
            const indexPath = path.join(__dirname, 'index.html');
            const htmlContent = fs.readFileSync(indexPath, 'utf8');

            const htmlTests = [
                {
                    name: '–ú–∏–Ω–∏-–∏–≥—Ä–∞ "–î–æ–∂–¥—å –º–æ–Ω–µ—Ç" –≤ HTML',
                    test: htmlContent.includes('id="coinRainOverlay"')
                },
                {
                    name: 'Canvas —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞',
                    test: htmlContent.includes('id="coinRainCanvas"')
                },
                {
                    name: 'UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                    test: htmlContent.includes('id="coinsCaught"') && htmlContent.includes('id="timeLeft"')
                },
                {
                    name: '–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —ç–∫—Ä–∞–Ω',
                    test: htmlContent.includes('id="coinRainResult"')
                },
                {
                    name: '–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã',
                    test: htmlContent.includes('id="coinRainClose"')
                },
                {
                    name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ "–î–û–ñ–î–¨ –ú–û–ù–ï–¢!"',
                    test: htmlContent.includes('–î–û–ñ–î–¨ –ú–û–ù–ï–¢!')
                }
            ];

            for (const test of htmlTests) {
                this.runTest(test.name, test.test, test.test ? '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' : '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞');
            }

            this.log('‚úÖ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'success');

        } catch (error) {
            this.runTest('HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', false, error.message);
        }
    }

    async testCssStyles() {
        this.log('üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Å—Ç–∏–ª–µ–π...', 'info');
        
        try {
            const indexPath = path.join(__dirname, 'index.html');
            const htmlContent = fs.readFileSync(indexPath, 'utf8');

            const cssTests = [
                {
                    name: '–°—Ç–∏–ª—å –æ–≤–µ—Ä–ª–µ—è –º–∏–Ω–∏-–∏–≥—Ä—ã',
                    test: htmlContent.includes('#coinRainOverlay')
                },
                {
                    name: '–°—Ç–∏–ª—å canvas —ç–ª–µ–º–µ–Ω—Ç–∞',
                    test: htmlContent.includes('#coinRainCanvas')
                },
                {
                    name: '–°—Ç–∏–ª–∏ UI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
                    test: htmlContent.includes('#coinRainUI')
                },
                {
                    name: '–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞',
                    test: htmlContent.includes('coinRainTitlePulse') || htmlContent.includes('titlePulse')
                },
                {
                    name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω',
                    test: htmlContent.includes('linear-gradient')
                },
                {
                    name: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω',
                    test: htmlContent.includes('@media')
                }
            ];

            for (const test of cssTests) {
                this.runTest(test.name, test.test, test.test ? '–°—Ç–∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã' : '–°—Ç–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }

            this.log('‚úÖ CSS —Å—Ç–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', 'success');

        } catch (error) {
            this.runTest('CSS —Å—Ç–∏–ª–∏', false, error.message);
        }
    }

    async testJavaScriptLogic() {
        this.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript –ª–æ–≥–∏–∫–∏...', 'info');
        
        try {
            const indexPath = path.join(__dirname, 'index.html');
            const htmlContent = fs.readFileSync(indexPath, 'utf8');

            const jsTests = [
                {
                    name: '–§—É–Ω–∫—Ü–∏—è startCoinRainGame',
                    test: htmlContent.includes('function startCoinRainGame')
                },
                {
                    name: '–ö–ª–∞—Å—Å Coin',
                    test: htmlContent.includes('class Coin')
                },
                {
                    name: 'Canvas —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥',
                    test: htmlContent.includes('getContext(\'2d\')')
                },
                {
                    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤',
                    test: htmlContent.includes('handleClick') || htmlContent.includes('addEventListener(\'click\'')
                },
                {
                    name: 'Touch —Å–æ–±—ã—Ç–∏—è',
                    test: htmlContent.includes('touchstart') || htmlContent.includes('touch')
                },
                {
                    name: '–¢–∞–π–º–µ—Ä –∏–≥—Ä—ã',
                    test: htmlContent.includes('setInterval') && htmlContent.includes('timeLeft')
                },
                {
                    name: '–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª',
                    test: htmlContent.includes('requestAnimationFrame')
                },
                {
                    name: '–°–ø–∞–≤–Ω –º–æ–Ω–µ—Ç',
                    test: htmlContent.includes('spawnCoin') || htmlContent.includes('new Coin')
                }
            ];

            for (const test of jsTests) {
                this.runTest(test.name, test.test, test.test ? '–õ–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞' : '–õ–æ–≥–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }

            this.log('‚úÖ JavaScript –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'success');

        } catch (error) {
            this.runTest('JavaScript –ª–æ–≥–∏–∫–∞', false, error.message);
        }
    }

    async testGameParameters() {
        this.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã...', 'info');
        
        try {
            const indexPath = path.join(__dirname, 'index.html');
            const htmlContent = fs.readFileSync(indexPath, 'utf8');

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–¥–∞
            const parameterTests = [
                {
                    name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 4 —Å–µ–∫—É–Ω–¥—ã',
                    pattern: /GAME_DURATION.*=.*4000/,
                    requirement: '4000ms (4 —Å–µ–∫—É–Ω–¥—ã)'
                },
                {
                    name: '–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã 5‚ÇΩ',
                    pattern: /COIN_VALUE.*=.*5/,
                    requirement: '5 —Ä—É–±–ª–µ–π'
                },
                {
                    name: '–ú–∞–∫—Å–∏–º—É–º 800‚ÇΩ',
                    pattern: /MAX_TOTAL_VALUE.*=.*800/,
                    requirement: '800 —Ä—É–±–ª–µ–π'
                },
                {
                    name: '–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç',
                    pattern: /MAX_COINS.*=.*Math\.floor.*MAX_TOTAL_VALUE.*COIN_VALUE/,
                    requirement: '160 –º–æ–Ω–µ—Ç (800√∑5)'
                },
                {
                    name: '–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–ø–∞–≤–Ω–∞ 100–º—Å',
                    pattern: /setInterval.*spawnCoin.*100/,
                    requirement: '100 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥'
                }
            ];

            for (const test of parameterTests) {
                const found = test.pattern.test(htmlContent);
                this.runTest(test.name, found, found ? `–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: ${test.requirement}` : `–ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${test.requirement}`);
                
                if (found) {
                    this.testResults.gameParameters[test.name] = test.requirement;
                }
            }

            this.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', 'success');

        } catch (error) {
            this.runTest('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã', false, error.message);
        }
    }

    async testIntegration() {
        this.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–π...', 'info');
        
        try {
            const indexPath = path.join(__dirname, 'index.html');
            const htmlContent = fs.readFileSync(indexPath, 'utf8');

            const integrationTests = [
                {
                    name: '–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–∏–Ω–∏-–∏–≥—Ä',
                    test: htmlContent.includes('Math.random() < 0.5') && htmlContent.includes('startCoinRainGame')
                },
                {
                    name: '–ó–∞–ø—É—Å–∫ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–∞—Ö',
                    test: htmlContent.includes('totalWin') && htmlContent.includes('betAmount')
                },
                {
                    name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –±–∞–ª–∞–Ω—Å—É',
                    test: htmlContent.includes('balance += totalCaught') || htmlContent.includes('balance + totalCaught')
                },
                {
                    name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI',
                    test: htmlContent.includes('updateUI()')
                },
                {
                    name: '–°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç',
                    test: htmlContent.includes('addBotMessage') && htmlContent.includes('–î–æ–∂–¥—å –º–æ–Ω–µ—Ç')
                },
                {
                    name: '–í–∏–±—Ä–∞—Ü–∏—è (Telegram)',
                    test: htmlContent.includes('vibrate()')
                },
                {
                    name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞',
                    test: htmlContent.includes('–î–æ–∂–¥—å –º–æ–Ω–µ—Ç') && htmlContent.includes('5‚ÇΩ –∑–∞ –º–æ–Ω–µ—Ç—É')
                }
            ];

            for (const test of integrationTests) {
                this.runTest(test.name, test.test, test.test ? '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' : '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è');
            }

            this.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'success');

        } catch (error) {
            this.runTest('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', false, error.message);
        }
    }

    runTest(name, passed, details) {
        this.testResults.testsRun++;
        
        if (passed) {
            this.testResults.testsPassed++;
            console.log(`‚úÖ ${name}: ${details}`);
        } else {
            this.testResults.testsFailed++;
            console.log(`‚ùå ${name}: ${details}`);
        }
        
        this.testResults.details.push({
            name,
            passed,
            details,
            timestamp: new Date()
        });
    }

    generateFinalReport() {
        console.log('\n' + '=' .repeat(60));
        console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('=' .repeat(60));

        const endTime = new Date();
        const duration = Math.round((endTime - this.testResults.startTime) / 1000);

        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
        console.log(`üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.testsRun}`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.testsPassed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.testsFailed}`);
        
        const successRate = Math.round((this.testResults.testsPassed / this.testResults.testsRun) * 100);
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

        // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        console.log('\nüìÇ –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:');
        
        const codeAnalysisCount = Object.values(this.testResults.codeAnalysis).filter(v => v === true).length;
        console.log(`   üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: ${codeAnalysisCount}/9 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
        
        const parameterCount = Object.keys(this.testResults.gameParameters).length;
        console.log(`   üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã: ${parameterCount}/5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);

        // –°—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        console.log('\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú:');
        
        const requirements = [
            { name: '4 —Å–µ–∫—É–Ω–¥—ã –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', key: 'GAME_DURATION.*4000' },
            { name: '1 –º–æ–Ω–µ—Ç–∞ = 5 —Ä—É–±–ª–µ–π', key: 'COIN_VALUE.*5' },
            { name: '–ú–∞–∫—Å–∏–º—É–º 800 —Ä—É–±–ª–µ–π', key: 'MAX_TOTAL_VALUE.*800' },
            { name: '–¢–∞–ø-–º–µ—Ö–∞–Ω–∏–∫–∞', key: 'handleClick|addEventListener.*click' },
            { name: 'Canvas –∞–Ω–∏–º–∞—Ü–∏—è', key: 'requestAnimationFrame' }
        ];

        const indexPath = path.join(__dirname, 'index.html');
        const htmlContent = fs.readFileSync(indexPath, 'utf8');

        requirements.forEach(req => {
            const regex = new RegExp(req.key);
            const met = regex.test(htmlContent);
            console.log(`   ${met ? '‚úÖ' : '‚ùå'} ${req.name}`);
        });

        // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        console.log('\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:');
        if (successRate >= 90) {
            console.log('   üåü –û–¢–õ–ò–ß–ù–û - –ú–∏–Ω–∏-–∏–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!');
        } else if (successRate >= 75) {
            console.log('   üëç –•–û–†–û–®–û - –ú–∏–Ω–∏-–∏–≥—Ä–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏');
        } else if (successRate >= 60) {
            console.log('   ‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
        } else {
            console.log('   ‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏');
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (this.testResults.testsFailed === 0) {
            console.log('   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ú–∏–Ω–∏-–∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
        } else {
            console.log('   üîß –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ');
            console.log('   üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        this.saveDetailedReport();

        console.log('\nüîó –°–°–´–õ–ö–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('   üåê –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞: http://localhost:8080/index.html');
        console.log('   üí∞ –î–µ–º–æ –¥–æ–∂–¥—è –º–æ–Ω–µ—Ç: http://localhost:8080/coin-rain-demo.html');
        console.log('   üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: http://localhost:8080/test-coin-rain-in-game.html');
        
        console.log('\n' + '=' .repeat(60));
    }

    saveDetailedReport() {
        const reportData = {
            summary: {
                timestamp: new Date().toISOString(),
                totalTests: this.testResults.testsRun,
                passed: this.testResults.testsPassed,
                failed: this.testResults.testsFailed,
                successRate: Math.round((this.testResults.testsPassed / this.testResults.testsRun) * 100)
            },
            codeAnalysis: this.testResults.codeAnalysis,
            gameParameters: this.testResults.gameParameters,
            detailedResults: this.testResults.details.map(test => ({
                name: test.name,
                passed: test.passed,
                details: test.details
            }))
        };

        const reportPath = path.join(__dirname, 'coin-rain-test-report.json');
        fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));
        
        console.log(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    }

    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        console.log(`[${timestamp}] ${message}`);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new CoinRainGameTester();
tester.runAllTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});